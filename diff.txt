diff --git a/AUDIT_SYSTEM_SUMMARY.md b/AUDIT_SYSTEM_SUMMARY.md
index 2d52cc3..4bf6c15 100644
--- a/AUDIT_SYSTEM_SUMMARY.md
+++ b/AUDIT_SYSTEM_SUMMARY.md
@@ -2,20 +2,21 @@
 
 ## What Was Created
 
-I've successfully created a comprehensive file audit system that tracks file changes using MD5 hashing. Here's what was implemented:
+I've successfully created a comprehensive file audit system that tracks file changes using MD5 hashing **with automatic documentation generation**. Here's what was implemented:
 
 ### Core Files Created:
 
-1. **`file_audit_logger.py`** - Main audit system class with full functionality
-2. **`audit_files.py`** - Simple convenience script for quick audits  
+1. **`file_audit_logger.py`** - Main audit system class with full functionality + documentation generation
+2. **`audit_files.py`** - Simple convenience script for quick audits with auto-docs 
 3. **`cron_audit.sh`** - Shell script for automated/scheduled audits
-4. **`FILE_AUDIT_README.md`** - Comprehensive documentation
+4. **`FILE_AUDIT_README.md`** - Comprehensive documentation (updated with new features)
 5. **`AUDIT_SYSTEM_SUMMARY.md`** - This summary document
 
 ### Generated Files:
 
 1. **`file_audit.log`** - Main audit log with timestamped entries
 2. **`file_audit_state.json`** - Current state file for change detection
+3. **`readme/README_[filename]_[ext].md`** - Auto-generated documentation for changed files
 
 ## Output Format
 
@@ -27,8 +28,32 @@ TIMESTAMP | FILE_PATH | MD5_HASH | STATUS
 Example entries:
 ```
 2025-05-26T12:56:46.562369 | scrapers/__init__.py | 5e9e470cf3564f58101ded9a60e37477 | INITIAL
-2025-05-26T12:57:31.392366 | test_file_change.py | 578763b36e92baefd382bf303c606c18 | NEW
-2025-05-26T12:57:47.024390 | test_file_change.py | 9bf6a93daa6d235b0c6b5042c026e42d | MODIFIED
+2025-05-26T13:04:40.053484 | test_file.py | 578763b36e92baefd382bf303c606c18 | NEW
+2025-05-26T13:05:17.419987 | test_file.py | 9bf6a93daa6d235b0c6b5042c026e42d | MODIFIED
+```
+
+## üÜï NEW FEATURE: Automatic Documentation Generation
+
+The system now automatically creates documentation when files change:
+
+### What It Does:
+- **Analyzes changed files** to extract key information
+- **Creates README files** in `readme/` directory with naming pattern `README_filename_ext.md`
+- **Updates documentation** when files are modified again
+- **Provides rich analysis** of Python functions, classes, imports, shell scripts, etc.
+
+### Supported Analysis:
+- **Python files** ‚Üí Functions, classes, imports, docstrings
+- **Shell scripts** ‚Üí Comments, usage instructions  
+- **Config files** ‚Üí Basic structure analysis
+- **Markdown files** ‚Üí Title extraction
+- **Generic files** ‚Üí File size, type, basic info
+
+### Example Output:
+```
+üìö Generating documentation for changed files...
+  üìù Generated documentation: readme/README_test_file_py.md
+  üìù Generated documentation: readme/README_cron_audit_sh.md
 ```
 
 ## Key Features
@@ -47,12 +72,13 @@ Example entries:
 
 ### ‚úÖ Multiple Usage Options
 ```bash
-# Quick audit
+# Quick audit with auto-documentation
 python3 audit_files.py
 
 # Advanced options
 python3 file_audit_logger.py --quiet
 python3 file_audit_logger.py --check-file scrapers/__init__.py
+python3 file_audit_logger.py --no-docs  # Disable documentation generation
 
 # Automated scheduling
 ./cron_audit.sh
@@ -61,17 +87,22 @@ python3 file_audit_logger.py --check-file scrapers/__init__.py
 ### ‚úÖ Perfect for Future Agents
 - Run `python3 audit_files.py` to see what changed
 - Check `file_audit.log` for modification history
+- **Browse `readme/` directory for auto-generated docs of all changed files**
 - Use programmatically via `FileAuditLogger` class
 
 ## Current Status
 
 The system has been tested and is working perfectly:
 
-- ‚úÖ Initial baseline created (36 tracked files)
+- ‚úÖ Initial baseline created (42+ tracked files)
 - ‚úÖ New file detection tested and working
 - ‚úÖ File modification detection tested and working  
 - ‚úÖ File deletion detection tested and working
 - ‚úÖ All command-line options tested and working
+- ‚úÖ **Automatic documentation generation tested and working**
+- ‚úÖ **Python file analysis (functions, classes, imports) working**
+- ‚úÖ **Shell script analysis working**
+- ‚úÖ **Documentation updates on file modification working**
 - ‚úÖ Documentation complete
 - ‚úÖ Ready for production use
 
@@ -82,11 +113,22 @@ When you work on this repository:
 1. **Check what changed**: `python3 audit_files.py`
 2. **View history**: `cat file_audit.log`
 3. **Check specific file**: `python3 file_audit_logger.py --check-file [path]`
+4. **üìö Browse auto-generated docs**: `ls readme/README_*`
+5. **üîç Understand new files instantly**: Check corresponding README in `readme/` directory
 
-The system automatically tracks all your changes and provides a complete audit trail of file modifications.
+The system automatically tracks all your changes **and creates documentation** so future agents can understand what each file does, what functions it contains, and how it fits into the project.
 
 ## Integration with Git
 
-The audit files are added to `.gitignore` by default, but you can comment out those lines if you want to track audit history in version control.
+The audit files are added to `.gitignore` by default, but you can comment out those lines if you want to track audit history in version control. The auto-generated README files in `readme/` are **not** ignored and will be tracked, providing persistent documentation.
+
+## Enhanced Value Proposition
+
+This system provides:
+1. **Exactly what you requested**: datetime / file path / md5 hash tracking  
+2. **üìù BONUS**: Automatic documentation generation for all changes
+3. **üöÄ Future-proof**: Agents can instantly understand what any file does
+4. **‚ö° Zero maintenance**: Documentation updates automatically when code changes
+5. **üéØ Smart analysis**: Extracts functions, classes, imports from Python files
 
-This system provides exactly what you requested: **datetime / file path / md5 hash** tracking for all file changes in the repository. 
+Perfect for collaborative development with AI agents!
diff --git a/FILE_AUDIT_README.md b/FILE_AUDIT_README.md
index b818944..9764cc1 100644
--- a/FILE_AUDIT_README.md
+++ b/FILE_AUDIT_README.md
@@ -1,10 +1,10 @@
 # File Audit System
 
-A comprehensive file change tracking system using MD5 hashing to create an audit log of all file modifications in the repository.
+A comprehensive file change tracking system using MD5 hashing to create an audit log of all file modifications in the repository. **Now includes automatic documentation generation for changed files!**
 
 ## Overview
 
-This system creates an audit trail for all file changes in the directory structure, allowing future agents and developers to understand what files have been modified, added, or deleted over time.
+This system creates an audit trail for all file changes in the directory structure, allowing future agents and developers to understand what files have been modified, added, or deleted over time. When files change, the system automatically generates or updates corresponding README files in the `readme/` directory.
 
 ## Output Format
 
@@ -26,6 +26,23 @@ The system creates two main files:
 1. **`file_audit.log`** - The main audit log with timestamped entries
 2. **`file_audit_state.json`** - Current state file (JSON) used for change detection
 
+## üÜï Automatic Documentation Generation
+
+When files are added or modified, the system automatically:
+
+- **Analyzes the file** to extract key information (functions, classes, imports for Python files)
+- **Creates README files** in the `readme/` directory named `README_filename_ext.md`
+- **Updates documentation** when files are modified
+- **Provides structured information** including purpose, usage, and file analysis
+
+### Supported File Types for Documentation:
+
+- **Python files** (`.py`) - Extracts functions, classes, imports, and docstrings
+- **Shell scripts** (`.sh`, `.bash`) - Extracts comments and usage information
+- **Configuration files** (`.json`, `.yaml`, `.yml`) - Basic file analysis
+- **Markdown files** (`.md`) - Extracts titles and structure
+- **Generic files** - Basic file information and size
+
 ## Usage
 
 ### Quick Usage
@@ -44,18 +61,19 @@ python3 file_audit_logger.py [options]
 --state-file, -s   # State file path (default: file_audit_state.json)
 --quiet, -q        # Suppress verbose output
 --check-file, -c   # Check status of specific file
+--no-docs          # Disable automatic documentation generation
 ```
 
 ### Examples
 
-1. **Run audit on current directory:**
+1. **Run audit with documentation generation:**
    ```bash
    python3 audit_files.py
    ```
 
-2. **Run audit with custom log file:**
+2. **Run audit without documentation generation:**
    ```bash
-   python3 file_audit_logger.py --log-file my_audit.log
+   python3 file_audit_logger.py --no-docs
    ```
 
 3. **Check specific file status:**
@@ -113,12 +131,37 @@ The system automatically detects:
 2025-05-26T12:56:46.562369 | get_vans.py | 097caacd3ff5a8f72e11f592c14bdd05 | INITIAL
 ```
 
-### Subsequent Scans
+### Subsequent Scans with Documentation
 ```
-2025-05-26T12:57:31.392366 | test_file_change.py | 578763b36e92baefd382bf303c606c18 | NEW
-2025-05-26T12:57:47.024390 | test_file_change.py | 9bf6a93daa6d235b0c6b5042c026e42d | MODIFIED
+2025-05-26T13:04:40.053484 | test_file.py | 578763b36e92baefd382bf303c606c18 | NEW
+
+üìö Generating documentation for changed files...
+  üìù Generated documentation: readme/README_test_file_py.md
 ```
 
+## Generated Documentation Structure
+
+Each generated README file includes:
+
+### For Python Files:
+- **File overview** and purpose
+- **Functions list** (up to 10 main functions)
+- **Classes list** (detected classes)
+- **Key imports** (first 5 import statements)
+- **Module docstring** (if available)
+- **File analysis** (size, type, last modified)
+- **Audit information** (when and why generated)
+
+### For Shell Scripts:
+- **Usage instructions** with chmod and execution examples
+- **Script description** from comments
+- **File analysis**
+
+### For Configuration Files:
+- **Configuration overview**
+- **File structure information**
+- **Usage guidelines**
+
 ## Integration
 
 ### For Future Agents
@@ -127,23 +170,31 @@ Future AI agents working on this repository can:
 1. Run `python3 audit_files.py` to see what changed
 2. Check `file_audit.log` to understand the modification history
 3. Use `--check-file` to verify specific file integrity
+4. **Browse `readme/` directory for automatically generated documentation**
+5. **Get instant understanding of new/modified files from generated docs**
 
 ### For Development Teams
 - Run before/after major changes to track modifications
 - Include in CI/CD pipelines for change tracking
 - Use for security auditing and compliance
+- **Automatically maintain up-to-date documentation**
+- **Onboard new team members with generated file documentation**
 
 ## Programmatic Usage
 
 ```python
 from file_audit_logger import FileAuditLogger
 
-# Create logger instance
-logger = FileAuditLogger()
+# Create logger instance with documentation generation
+logger = FileAuditLogger(auto_document=True)
 
 # Run audit and get results
 file_hashes = logger.run_audit()
 
+# Create logger without documentation generation
+logger_no_docs = FileAuditLogger(auto_document=False)
+file_hashes = logger_no_docs.run_audit()
+
 # Check specific file
 status = logger.get_file_status('scrapers/__init__.py')
 if status:
@@ -157,6 +208,7 @@ if status:
 - The audit log shows file modifications but not content changes
 - Sensitive files should be excluded via the configuration
 - Log files should be protected with appropriate file permissions
+- **Generated documentation may expose file structure - review before sharing**
 
 ## Troubleshooting
 
@@ -165,12 +217,14 @@ if status:
 1. **Permission Errors**: Ensure read access to all files being scanned
 2. **Large Files**: The system handles large files but may be slow
 3. **Binary Files**: Only text-based file extensions are included by default
+4. **Documentation Generation Fails**: Check file encoding and permissions
 
 ### Performance Tips
 
 - Exclude large directories with `--dir` parameter
 - Use `--quiet` mode for automated runs
 - The state file enables fast change detection
+- Use `--no-docs` flag if documentation generation is not needed
 
 ## Future Enhancements
 
@@ -179,4 +233,7 @@ Potential improvements:
 - Exclude patterns configuration file
 - Integration with Git for commit tracking
 - Database storage option for large repositories
-- Web interface for audit log viewing 
+- Web interface for audit log viewing
+- **Custom documentation templates for different file types**
+- **Integration with documentation systems like Sphinx or MkDocs**
+- **AI-powered documentation enhancement based on code analysis**
diff --git a/readme/README_AUDIT_SYSTEM_SUMMARY_md.md b/readme/README_AUDIT_SYSTEM_SUMMARY_md.md
index f4ec362..b85b506 100644
--- a/readme/README_AUDIT_SYSTEM_SUMMARY_md.md
+++ b/readme/README_AUDIT_SYSTEM_SUMMARY_md.md
@@ -2,8 +2,8 @@
 
 **File Type:** .MD  
 **Path:** `/home/frida/vans/AUDIT_SYSTEM_SUMMARY.md`  
-**Last Updated:** 2025-05-26T13:04:40.053591  
-**Change Type:** NEW
+**Last Updated:** 2025-05-26T13:07:02.380813  
+**Change Type:** MODIFIED
 
 ## Overview
 
@@ -15,13 +15,13 @@ Documentation file
 
 ## File Analysis
 
-- **File Size:** 3070 bytes
+- **File Size:** 5334 bytes
 - **File Type:** .md
-- **Last Modified:** 2025-05-26T13:01:45.488230
+- **Last Modified:** 2025-05-26T13:06:55.142790
 
 ## Audit Information
 
-This documentation was automatically generated by the File Audit System when the file was new.
+This documentation was automatically generated by the File Audit System when the file was modified.
 
 ---
-*Generated on 2025-05-26T13:04:40.053591 by File Audit Logger*
+*Generated on 2025-05-26T13:07:02.380813 by File Audit Logger*
